/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package supply.chain.management;
import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.shim.ChaincodeStub;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public final class ProductTest {

    @Nested
    class InvokeQueryProductTransaction {

        @Test
        public void whenProductExists() {
        	ProductTransfer contract = new ProductTransfer();
            Context ctx = mock(Context.class);
            ChaincodeStub stub = mock(ChaincodeStub.class);
            when(ctx.getStub()).thenReturn(stub);
            when(stub.getStringState("1"))
                    .thenReturn("{\"id\":\"1\",\"description\":\"test product\",\"quantity\":\"5\""
                    		+ ",\"prize\":\"100\",\"variant\":\"seedco\",\"owner\":\"Org1\"}");

            Product product = contract.queryProductById(ctx, "1");

            assertThat(product.getDescription())
                    .isEqualTo("test product");
            assertThat(product.getOwner())
                    .isEqualTo("Org1");
            assertThat(product.getPrize())
                    .isEqualTo("100");
            assertThat(product.getQuantity())
            		.isEqualTo("5");
            assertThat(product.getVariant())
            		.isEqualTo("seedco");
            assertThat(product.getId())
            		.isEqualTo("1");
            
        }

        @Test
        public void whenProductDoesNotExist() {
        	ProductTransfer contract = new ProductTransfer();
            Context ctx = mock(Context.class);
            ChaincodeStub stub = mock(ChaincodeStub.class);
            when(ctx.getStub()).thenReturn(stub);
            when(stub.getStringState("15")).thenReturn("");

            Throwable thrown = catchThrowable(() -> {
                contract.queryProductById(ctx, "15");
            });

            assertThat(thrown).isInstanceOf(ChaincodeException.class).hasNoCause()
                    .hasMessage("Product 15 does not exist");
        }

    }

}